name: Node.js CI/CD

on:
  push:
    branches: [ main ]   # Trigger only on push/merge to main (PR merge)

jobs:
  build:
    name: Build & Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Run tests and save output
        run: npm test > test-output.txt

      - name: Generate version
        id: version
        run: |
          VERSION="build-$(date +%Y%m%d)-${GITHUB_RUN_NUMBER}"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "$VERSION" > version.txt

      - name: Upload version info
        uses: actions/upload-artifact@v4
        with:
          name: version-info
          path: version.txt

      - name: Upload versioned test logs
        uses: actions/upload-artifact@v4
        with:
          name: test-logs-${{ env.VERSION }}
          path: test-output.txt

  deploy-dev:
    name: Deploy to Dev
    runs-on: ubuntu-latest
    needs: build
    environment: dev

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download version info
        uses: actions/download-artifact@v4
        with:
          name: version-info

      - name: Set version
        run: |
          VERSION=$(cat version.txt)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Download versioned test logs
        uses: actions/download-artifact@v4
        with:
          name: test-logs-${{ env.VERSION }}

      - name: Deploy to Dev
        run: |
          echo "ðŸš€ Deploying $VERSION to DEV environment"
          echo "DEV ENV: Showing contents of test-output.txt:"
          cat test-output.txt

  deploy-prod:
    name: Deploy to Prod
    runs-on: ubuntu-latest
    needs: deploy-dev
    if: startsWith(github.event.head_commit.message, 'Merge pull request')  # Only deploy on PR merge

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download version info
        uses: actions/download-artifact@v4
        with:
          name: version-info

      - name: Set version
        run: |
          VERSION=$(cat version.txt)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Download versioned test logs
        uses: actions/download-artifact@v4
        with:
          name: test-logs-${{ env.VERSION }}

      - name: Deploy to Prod
        run: |
          echo "ðŸš€ Deploying $VERSION to PROD environment"
          echo "PROD ENV: Showing contents of test-output.txt:"
          cat test-output.txt

      - name: Create GitHub Release (optional)
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.VERSION }}
          name: Release ${{ env.VERSION }}
          body: |
            Deployed ${{ env.VERSION }} to PROD from CI/CD pipeline.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Notify Slack
        if: always()
        run: |
          curl -X POST -H 'Content-type: application/json' --data "{
            \"text\": \"ðŸš€ *Deployment Notification*: Version $VERSION has been deployed to *PROD* from GitHub Actions.\"
          }" $SLACK_WEBHOOK_URL
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
